<!DOCTYPE html>
<html lang="en" id="html">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>TakeNote</title>


    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.4.0/css/font-awesome.min.css" rel="stylesheet" type="text/css" />
    <link href='/css/froala_editor.min.css' rel='stylesheet' type='text/css' />
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

    <!-- Include JS file. -->
    <script src="/js/text_functions.js"></script>
    <script src="/js/mousetrap.js"></script>
    <script type='text/javascript' src='/js/froalajs/froala_editor.pkgd.min.js'></script>
    <script type='text/javascript' src='/js/froalajs/plugins/link.min.js'></script>
    <script src="https://code.jquery.com/jquery-1.12.4.js"></script>
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="https://unpkg.com/hotkeys-js/dist/hotkeys.min.js"></script>


    <!-- Include Editor style. -->
    <link rel="stylesheet" href="css/style.css">

    <style>
        .draggable {
            width: 150px;
            height: 150px;
            padding: 0.1em;
        }
    </style>

</head>

<body id="body">
    <div id="contentHolder" class="wrap">

        <div id="1" class="ui-widget-content draggable">
            <div class="handle">...</div>
            <div class="editable-div">
                <p><a href="">Immutable</a></p> Editor State: The Draft.js model is built with immutable-js, offering an API with functional state updates and aggressively leveraging data persistence for scalable memory us
            </div>
        </div>

        <div id="2" class="ui-widget-content draggable">
            <div class="handle">...</div>
            <div class="editable-div">
                offering an API with functional state updates and aggressively leveraging data persistence for scalable memory us
            </div>
        </div>
    </div>

    <footer id="toolbar">


    </footer>
</body>

<script>
    var editor;

    async function setUpEditor() {
        if (!editor) editor = await setup_froala();
        setTimeout(() => {
            removeRedBanner();
        }, 1000);
    }

    function removeRedBanner() {

        var obj = $(".fr-wrapper");
        if (obj.length != undefined) {
            obj.each((num, ele) => {
                var child = ele.firstChild;
                if (child.classList.length == 0) child.remove();
            });
        } else {
            var child = obj.find(':first-child');
            if (child.classList.length == 0) child.remove();
        }
    }

    function removeFooter() {
        $('#toolbar').find(':first-child').remove();
    }

    function removeClasses() {


        rm('.fr-box');
        rm('.fr-basic');
        rm('.fr-wrapper');
        rm('.fr-quick-insert');
        rm('.second-toolber');
        rm('.fr-element');
        rm('.fr-view');
        rm('.ui-resizable-s');
        rm('.ui-resizable-e');
        rm('.ui-resizable-se');
        rm('.ui-resizable-handle');
        rm('.ui-icon');
        rm('.ui-icon-gripsmall-diagonal-se');

        function rm(class_name) {
            $(class_name).removeClass(class_name);
            var cln = class_name.replace('.', '');
            $(class_name).each((index, elemet) => {
                elemet.classList.remove(cln);
            });
        }
    }

    function removeEditor() {

        if (editor.length != undefined)
            editor.forEach(ed => {
                ed.destroy();
                ed = null;
            });

        else editor.destroy();
        editor = null;
    }

    function setUpDraggingAndResizing() {
        var drag = $('.draggable');
        var ed = $('.editable-div');
        if (drag.length != undefined)
            drag.each((number, element) => {
                var ele = $(element);
                ele.draggable();
                ele.resizable();

                ele.mousedown((e) => {
                    drag.each((number, element) => {
                        $(element).removeClass('zindex');
                    });
                    ele.draggable('enable');
                    ele.addClass('zindex');
                })
            });
        else {
            drag.draggable();
            drag.resizable();
            drag.mousedown((e) => {
                drag.draggable('enable');
            })
        }

        if (ed.length != undefined)
            ed.each((number, element) => {
                var ele = $(element);

                ele.mousedown((e) => {
                    ele.parent().draggable('disable');
                })

                console.log(ele.parent());
            });


    }



    function onPageLoad() {
        var body = document.getElementById('body').innerHTML;
        var refreshNeeded = false;

        $('#contentHolder').ondblclick = function d() {
            console.log('doubleClicked');
            $('<div id="1" class="ui-widget-content draggable"><div class="handle">...</div><div class="editable-div"></div></div>').appendTo($('#contentHolder'));
            Mousetrap.trigger('ctrl+s');
            Mousetrap.trigger('ctrl+r');

        };

        Mousetrap.bind('ctrl+s', function(e) {
            body = document.getElementById('body').innerHTML;
        });
        Mousetrap.bind('ctrl+r', function(e) {
            var body1 = document.getElementById('body');
            body1.innerHTML = body;
            removeEditor();
            removeFooter();
            removeClasses();
            setUpEditor();
            setUpDraggingAndResizing();
            return true;
        });

        $('.editable-div').mouseup(function(e) {
            var text = getSelectedText();
            if (text == '' || text === undefined) return;
            $(this)['context']['data-froala.editor'].customPlugin.showPopup();
            //replaceSelectedText(text);
        });

        function getSelectedText() {
            if (window.getSelection) {
                var sel = window.getSelection();
                if (sel == '' || sel === undefined) return;
                if (sel.anchorNode.parentNode.className == '') {
                    return sel.toString();
                } else return undefined;
                //return window.getSelection().toString();
            } else if (document.selection) {
                return document.selection.createRange().text;
            }
            return '';
        }

        function justPrint() {
            console.log("just printing some text");
        }



    }

    $(function() {
        setUpDraggingAndResizing();
        setUpEditor();
        onPageLoad();
    });
</script>


</html>